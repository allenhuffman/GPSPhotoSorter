#!/usr/bin/env python3
###############################################################################
#
# Sub-Etha Software's GPS Photo Sorter
# created (mostly) by chat.chatgpt.com
# with updates to make it actually work
# By Allen C. Huffman
# www.subethasoftware.com
# https://github.com/allenhuffman/GPSPhotoSorter
#
# Move photos in to subdirectories based on their GPS coordinates being
# within areas defined in a KML file generated by Goodle Maps.
#
# 2023-03-09 0.01 allenh - Project began.
# 2023-03-10 0.02 allenh - Added command line options and more output.
# 2023-03-11 0.03 allenh - More comments and better output.
#
# TODO:
#
# 1) Verbose mode, so default can be silent operation.
#
# TOFIX:
#
# 1) Any exception tyring to parse the photo flags it as a photo with
#    no GPS data, which may not be the case. Better exception handling
#    is needed. (Perhaps flagging files with no time, no GPS, etc.).
#
###############################################################################

# https://docs.python.org/3/library/os.html
import os
# https://docs.python.org/3/library/shutil.html
import shutil
# https://docs.python.org/3/library/xml.etree.elementtree.html
import xml.etree.ElementTree as ET
# https://pypi.org/project/ExifRead/
import exifread
# https://shapely.readthedocs.io/en/stable/index.html
from shapely.geometry import Point
from shapely.geometry.polygon import Polygon
# https://docs.python.org/3/library/argparse.html
import argparse

# Parse command line arguments.

parser = argparse.ArgumentParser(
                    description='Sort photos in to directories based on GPS data.',
                    epilog='https://github.com/allenhuffman/GPSPhotoSorter')

parser.add_argument('--kml', type=str, default='GPS Areas.kml',
                    help='Path to KML file containing GPS areas (default: GPS Areas.kml)')

parser.add_argument('--input', type=str, default='photos',
                    help='Path to directory containing photos (default: photos)')

parser.add_argument('--output', type=str, default='sorted_photos',
                    help='Path to directory where sorted photos will be moved (default: sorted_photos)')

parser.add_argument('--nogpsdir', type=str, default='photos_no_gps',
                    help='Path to directory where photos without GPS data be moved (default: photos_no_gps)')

args = parser.parse_args()

# Use args.kml, args.input, args.output and args.nogpsdir in your script.

print(f'Sorting photos in "{args.input}" to "{args.output}" or "{args.nogpsdir}"...')

# Parse the KML file and extract the name and coordinates of the Placemarks.
tree = ET.parse(args.kml)
root = tree.getroot()
placemarks = {}
for pm in root.iter('{http://www.opengis.net/kml/2.2}Placemark'):
    name = pm.find('{http://www.opengis.net/kml/2.2}name').text
    coords_str = pm.find('{http://www.opengis.net/kml/2.2}Polygon/{http://www.opengis.net/kml/2.2}outerBoundaryIs/{http://www.opengis.net/kml/2.2}LinearRing/{http://www.opengis.net/kml/2.2}coordinates').text
    coords = [(float(c.split(',')[0]), float(c.split(',')[1])) for c in coords_str.split()]
    placemarks[name] = Polygon(coords)
    print('Placemark:', name)
    #print('Placemark coordinates:', coords)

# Loop through each photo and move it to the appropriate folder.
for filename in os.listdir(args.input):
    if filename.endswith('.jpg'):
        with open(os.path.join(args.input, filename), 'rb') as f:
            tags = exifread.process_file(f)
            # for tag in tags.keys():
            #      if 'GPS' in tag:
            #          print(tag, tags[tag])
            try:
                # Calculate latitude value.
                lat = float(tags['GPS GPSLatitude'].values[0].num) / float(tags['GPS GPSLatitude'].values[0].den) + \
                    (float(tags['GPS GPSLatitude'].values[1].num) / float(tags['GPS GPSLatitude'].values[1].den))/60 + \
                    (float(tags['GPS GPSLatitude'].values[2].num) / float(tags['GPS GPSLatitude'].values[2].den))/3600
                
                if (tags['GPS GPSLatitudeRef'].values == 'S'):
                    lat = -lat

                # Calculate longitute value.
                lon = float(tags['GPS GPSLongitude'].values[0].num) / float(tags['GPS GPSLongitude'].values[0].den) + \
                    (float(tags['GPS GPSLongitude'].values[1].num) / float(tags['GPS GPSLongitude'].values[1].den)/60) + \
                    (float(tags['GPS GPSLongitude'].values[2].num) / float(tags['GPS GPSLongitude'].values[2].den)/3600)

                if (tags['GPS GPSLongitudeRef'].values == 'W'):
                    lon = -lon

                #print('  Photo coordinates:', lat, lon)

                # Create a Point based on the photo's latitude and longitude values.
                point = Point(lon, lat)

                # Loop through each Placemark found in the KML file.
                for name, polygon in placemarks.items():
                    # If point is within that Placemark polygon area...
                    if polygon.contains(point):
                        # Destination directory will be OUTPUT/Placemark name.
                        dest_dir = os.path.join(args.output, name)
                        # Create output directory if it does not exit.
                        if not os.path.exists(dest_dir):
                            os.makedirs(dest_dir)
                        # Move photo to that directory.
                        print(f'Moving {filename} to {dest_dir}')
                        shutil.move(os.path.join(args.input, filename), os.path.join(dest_dir, filename))
                        break
            except:
                # Exception - Problem with this photo.
                # TOFIX: For now, assume it is just missing the GPS data.
                # If no gps directory doesn't exist, create it.
                if not os.path.exists(args.nogpsdir):
                    os.makedirs(args.nogpsdir)
                # Then move the file that had the problem in to that folder.
                print(f'Moving {filename} to {args.nogpsdir}')
                shutil.move(os.path.join(args.input, filename), os.path.join(args.nogpsdir, filename))
                pass # ignore photos without GPS data or with invalid GPS data

# End of script.
